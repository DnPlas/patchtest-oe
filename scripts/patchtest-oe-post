#!/bin/bash -eu
# ex:ts=4:sw=4:sts=4:et
# -*- tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*-
#
# patchtest-oe-post: Poll, test and post results to a Patchwork instance.
#
# Copyright (C) 2016 Intel Corporation
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

function usage() {
    cat << EOF
\$ $(basename $0) -r <repodir> -s <startdir> -R <resultsdir> -e <series>

where

    <repodir>   : Repository which is tracked by Patchwork. Default: '$repodir'
    <startdir>  : Start directory for test discovery (patchtest --help, for more info). Default: '$startdir'
    <resultsdir>: Output directory containing results. Default: '$resultsdir'
    <series>    : One or more <seriesid>.<revisionid> separated by spaces. Default: '$series'
                  If not specified, the git-pw timestamp file will be used
EOF
>&2

    exit 1
}

repodir=''
startdir=''
resultsdir='/tmp/patchtest'
newseries=''

while getopts ":r:s:R:e:h" opt; do
    case $opt in
	r)
	    repodir=$OPTARG
	    ;;
	s)
	    startdir=$OPTARG
	    ;;
	R)
	    resultsdir=$OPTARG
	    ;;
	e)
	    newseries=$OPTARG
	    ;;
	h)
	    usage
	    ;;
	\?)
	    echo "Invalid option: -$OPTARG" >&2
	    usage
	    ;;
	:)
	    echo "Option -$OPTARG requires an argument." >&2
	    usage
	    ;;
    esac
done

# must parameters
[ -z $repodir ] && { echo -e 'Repository missing'; usage; }
[ -z $repodir ] && { echo -e 'Repository missing'; usage; }
[ -z $repodir ] && { echo -e 'Repository missing'; usage; }

[ ! -d ${resultsdir} ] && { mkdir -p ${resultsdir}; }

if [ -z $newseries ]; then
    newseries="$(patchtest-oe-poll-series ${repodir})"
fi

failure="failure"
success="success"
testname="patchtest"

for seriesrev in ${newseries}; do

    series="$(echo $seriesrev | cut -d. -f1)"
    revision="$(echo $seriesrev | cut -d. -f2)"

    rawsummary="${resultsdir}/${series}.${revision}.raw.summary"
    finalsummary="${resultsdir}/${series}.${revision}.summary"

    # test the patch and store the raw summary
    ( cd ${repodir}; git pw mbox ${series} -r ${revision} | \
	patchtest - \
	    -C $repodir \
	    -s $startdir \
	    -j \
    ) >  $rawsummary

    # dont post if something went wrong
    if [ "$?" -ne "0" ]; then
       echo -e "patchtest return a non-zero code, skipping posting for series $series revision $revision" >&2
       continue
    fi

    # create the final summary
    if [ "$(cat ${rawsummary} | patchtest-oe-any-fail)" == "yes" ]; then
	cat ${rawsummary} | grep '"status": "FAIL"' | patchtest-oe-summary $series $revision > ${finalsummary}
	result=$failure
    else
	# produce the summary to be post to patchwork
	cat ${rawsummary} | patchtest-oe-summary $series $revision > ${finalsummary}
	result=$success
    fi

    # Post results
    ( cd ${repodir}; git pw post-result \
	$series \
	$testname \
	$result \
	--revision ${revision} \
	--summary-from-file ${finalsummary} \
    )

    echo -e "Tested Series ${series} Revision ${revision}. Result: ${result}." >&2
done
