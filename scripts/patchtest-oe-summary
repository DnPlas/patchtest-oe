#!/usr/bin/env python

# Produce a summary based on input (--json) results coming from patchtest
#
# Copyright (C) 2016 Intel Corporation
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import sys
from os.path import join, dirname, realpath
import fileinput
from json import loads

header = """Thank you for your patch submission of the following patch series to
OE-Core - this is an automated response. Several tests have been executed
on this proposed patch yielding the following results:"""

footer = """If you believe any of these test results are incorrect, please reply
to the mailing list (openembedded-core@lists.openembedded.org) raising 
your concerns. Otherwise we would appreciate you correcting the issues
and submitting a new version of the patchset if applicable. Please
ensure you add/increment the version number when sending the new
version (i.e. [PATCH] -> [PATCH v2] -> [PATCH v3] -> ...)."""

def p(key, value, leftwidth=20, maxwidth=80):
    space, output = ' ', list()
    key, value = str(key), str(value)
    if not key or not value:
        return
    key, lines = key.strip(), value.strip().splitlines()
    rightwidth = maxwidth - leftwidth
    output.append('{:{}s} {:<{}s}'.format(key, leftwidth, lines[0], rightwidth))
    for line in lines[1:]:
        output.append('{:{}s} {:<{}s}'.format(space, leftwidth, line, rightwidth))
    return '\n'.join(output)

def summary(jsonlines):
    print "%s\n" % header

    for jsonline in jsonlines:
        result      = loads(jsonline)
        status      = result['status']
        data        = result['data']

        # First row corresponds to the test ID, pop it a provide a shorter test id string
        testidtuple = data.pop(0)
        keytestid   = testidtuple[0]
        fulltestid  = testidtuple[1]
        shorttestid = '.'.join(fulltestid.split('.')[-2:])
        data.insert(0, (keytestid, shorttestid))

        # we do not care about tests done before merge (pretest tests)
        if 'pretest' in fulltestid:
            continue

        print '%s\n' % ('-'*80)
        for k, v in data:
            print(p(k, v))
        print '\n'

    print '%s' % ('-'*80)
    print "\n%s" % footer

if __name__ == '__main__':
    ret = 1
    try:
        ret = summary(fileinput.input('-'))
    except:
        import traceback
        traceback.print_exc(5)
    sys.exit(ret)
